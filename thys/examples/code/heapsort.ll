; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"






define i64* @heapsort(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xba = sub i64 %x2, 1
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %x, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %xba, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x19, %ctd_ifd ], [ %xd, %then ]
    %a1 = extractvalue { i64*, i64 } %xca, 0
    %x4 = extractvalue { i64*, i64 } %xca, 1
    %x5 = icmp slt i64 %x1, %x4
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xca, 0
    %a2 = extractvalue { i64*, i64 } %xca, 1
    %xda = sub i64 %a2, 1
    %xea = sub i64 %xda, %x1
    %xf = add i64 %x1, %xea
    %xg = getelementptr i64, i64* %a11, i64 %xf
    %r = load i64, i64* %xg
    %xh = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xi = insertvalue { i64, i64* } %xh, i64* %a11, 1
    %a1a = extractvalue { i64, i64* } %xi, 0
    %a2a = extractvalue { i64, i64* } %xi, 1
    %xj = insertvalue { i64, i1 } zeroinitializer, i64 %xea, 0
    %tmpc = insertvalue { i64, i1 } %xj, i1 1, 1
    %xk = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2a, 0
    %xl = insertvalue { i64*, { i64, i1 } } %xk, { i64, i1 } %tmpc, 1
    br label %while_starta

  while_starta:
    %xja = phi { i64*, { i64, i1 } } [ %x17, %ctd_ifa ], [ %xl, %while_body ]
    %a1aa = extractvalue { i64*, { i64, i1 } } %xja, 0
    %xka = extractvalue { i64*, { i64, i1 } } %xja, 1
    %a1b = extractvalue { i64, i1 } %xka, 0
    %a2b = extractvalue { i64, i1 } %xka, 1
    %xla = sub i64 %x2, %x1
    %xma = sub i64 %xla, 1
    %xna = udiv i64 %xma, 2
    %xo = icmp slt i64 %a1b, %xna
    %x6 = and i1 %xo, %a2b
    br i1 %x6, label %while_bodya, label %while_enda

  while_bodya:
    %a1aa1 = extractvalue { i64*, { i64, i1 } } %xja, 0
    %xka1 = extractvalue { i64*, { i64, i1 } } %xja, 1
    %a1b1 = extractvalue { i64, i1 } %xka1, 0
    %a2b1 = extractvalue { i64, i1 } %xka1, 1
    %xla1 = mul i64 %a1b1, 2
    %xma1 = add i64 %xla1, 1
    %xna1 = mul i64 %a1b1, 2
    %xoa = add i64 %xna1, 2
    %xpa = add i64 %x1, %xma1
    %xq = add i64 %x1, %xoa
    %xr = getelementptr i64, i64* %a1aa1, i64 %xpa
    %ra = load i64, i64* %xr
    %xs = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xt = insertvalue { i64, i64* } %xs, i64* %a1aa1, 1
    %a1c = extractvalue { i64, i64* } %xt, 0
    %a2c = extractvalue { i64, i64* } %xt, 1
    %xu = getelementptr i64, i64* %a2c, i64 %xq
    %rb = load i64, i64* %xu
    %xv = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xw = insertvalue { i64, i64* } %xv, i64* %a2c, 1
    %a1ab = extractvalue { i64, i64* } %xw, 0
    %a2aa = extractvalue { i64, i64* } %xw, 1
    %xx = icmp ult i64 %a1c, %a1ab
    %p = getelementptr i64, i64* %a2aa, i64 %xpa
    store i64 %a1c, i64* %p
    %pa = getelementptr i64, i64* %a2aa, i64 %xq
    store i64 %a1ab, i64* %pa
    br i1 %xx, label %thena, label %elsea

  thena:
    %yb = getelementptr i64, i64* %a1aa1, i64 %xq
    %rc = load i64, i64* %yb
    %yc = insertvalue { i64, i64* } zeroinitializer, i64 %rc, 0
    %yd = insertvalue { i64, i64* } %yc, i64* %a1aa1, 1
    %a1d = extractvalue { i64, i64* } %yd, 0
    %a2d = extractvalue { i64, i64* } %yd, 1
    %ye = icmp ult i64 %a1a, %a1d
    %pb = getelementptr i64, i64* %a2d, i64 %xq
    store i64 %a1d, i64* %pb
    br i1 %ye, label %thenb, label %elseb

  thenb:
    %yh = add i64 %x1, %xoa
    %yi = getelementptr i64, i64* %a1aa1, i64 %yh
    %rd = load i64, i64* %yi
    %yj = insertvalue { i64, i64* } zeroinitializer, i64 %rd, 0
    %yk = insertvalue { i64, i64* } %yj, i64* %a1aa1, 1
    %a1ca = extractvalue { i64, i64* } %yk, 0
    %a2ca = extractvalue { i64, i64* } %yk, 1
    %yl = add i64 %x1, %a1b1
    %pc = getelementptr i64, i64* %a2ca, i64 %yl
    store i64 %a1ca, i64* %pc
    %yn = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca, 0
    %yo = insertvalue { i64, i1 } zeroinitializer, i64 %xoa, 0
    %x7 = insertvalue { i64, i1 } %yo, i1 1, 1
    %x8 = insertvalue { i64*, { i64, i1 } } %yn, { i64, i1 } %x7, 1
    br label %ctd_ifb

  elseb:
    %yh1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1aa1, 0
    %yi1 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x9 = insertvalue { i64, i1 } %yi1, i1 0, 1
    %x10 = insertvalue { i64*, { i64, i1 } } %yh1, { i64, i1 } %x9, 1
    br label %ctd_ifb

  ctd_ifb:
    %x11 = phi { i64*, { i64, i1 } } [ %x10, %elseb ], [ %x8, %thenb ]
    br label %ctd_ifa

  elsea:
    %yb1 = getelementptr i64, i64* %a1aa1, i64 %xpa
    %rc1 = load i64, i64* %yb1
    %yc1 = insertvalue { i64, i64* } zeroinitializer, i64 %rc1, 0
    %yd1 = insertvalue { i64, i64* } %yc1, i64* %a1aa1, 1
    %a1d1 = extractvalue { i64, i64* } %yd1, 0
    %a2d1 = extractvalue { i64, i64* } %yd1, 1
    %ye1 = icmp ult i64 %a1a, %a1d1
    %pb1 = getelementptr i64, i64* %a2d1, i64 %xpa
    store i64 %a1d1, i64* %pb1
    br i1 %ye1, label %thenc, label %elsec

  thenc:
    %yh2 = add i64 %x1, %xma1
    %yi2 = getelementptr i64, i64* %a1aa1, i64 %yh2
    %rd1 = load i64, i64* %yi2
    %yj1 = insertvalue { i64, i64* } zeroinitializer, i64 %rd1, 0
    %yk1 = insertvalue { i64, i64* } %yj1, i64* %a1aa1, 1
    %a1ca1 = extractvalue { i64, i64* } %yk1, 0
    %a2ca1 = extractvalue { i64, i64* } %yk1, 1
    %yl1 = add i64 %x1, %a1b1
    %pc1 = getelementptr i64, i64* %a2ca1, i64 %yl1
    store i64 %a1ca1, i64* %pc1
    %yn1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca1, 0
    %yo1 = insertvalue { i64, i1 } zeroinitializer, i64 %xma1, 0
    %x12 = insertvalue { i64, i1 } %yo1, i1 1, 1
    %x13 = insertvalue { i64*, { i64, i1 } } %yn1, { i64, i1 } %x12, 1
    br label %ctd_ifc

  elsec:
    %yh3 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1aa1, 0
    %yi3 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x14 = insertvalue { i64, i1 } %yi3, i1 0, 1
    %x15 = insertvalue { i64*, { i64, i1 } } %yh3, { i64, i1 } %x14, 1
    br label %ctd_ifc

  ctd_ifc:
    %x16 = phi { i64*, { i64, i1 } } [ %x15, %elsec ], [ %x13, %thenc ]
    br label %ctd_ifa

  ctd_ifa:
    %x17 = phi { i64*, { i64, i1 } } [ %x16, %ctd_ifc ], [ %x11, %ctd_ifb ]
    br label %while_starta

  while_enda:
    %a1aa2 = extractvalue { i64*, { i64, i1 } } %xja, 0
    %xka2 = extractvalue { i64*, { i64, i1 } } %xja, 1
    %a1b2 = extractvalue { i64, i1 } %xka2, 0
    %a2b2 = extractvalue { i64, i1 } %xka2, 1
    %xla2 = sub i64 %x2, %x1
    %xma2 = udiv i64 %xla2, 2
    %xn = icmp slt i64 %a1b2, %xma2
    br i1 %xn, label %thend, label %elsed

  thend:
    %xoa1 = mul i64 %a1b2, 2
    %xpa1 = add i64 %xoa1, 1
    %xq1 = add i64 %x1, %xpa1
    %xr1 = getelementptr i64, i64* %a1aa2, i64 %xq1
    %ra1 = load i64, i64* %xr1
    %xs1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xt1 = insertvalue { i64, i64* } %xs1, i64* %a1aa2, 1
    %a1c1 = extractvalue { i64, i64* } %xt1, 0
    %a2c1 = extractvalue { i64, i64* } %xt1, 1
    %xu1 = icmp ult i64 %a1a, %a1c1
    %p1 = getelementptr i64, i64* %a2c1, i64 %xq1
    store i64 %a1c1, i64* %p1
    br i1 %xu1, label %thene, label %elsee

  thene:
    %xx1 = add i64 %x1, %xpa1
    %xy = getelementptr i64, i64* %a1aa2, i64 %xx1
    %rb1 = load i64, i64* %xy
    %xz = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %ya = insertvalue { i64, i64* } %xz, i64* %a1aa2, 1
    %a1ca2 = extractvalue { i64, i64* } %ya, 0
    %a2ca2 = extractvalue { i64, i64* } %ya, 1
    %yb2 = add i64 %x1, %a1b2
    %pa1 = getelementptr i64, i64* %a2ca2, i64 %yb2
    store i64 %a1ca2, i64* %pa1
    %yd2 = add i64 %x1, %xpa1
    %pb2 = getelementptr i64, i64* %a2ca2, i64 %yd2
    store i64 %a1a, i64* %pb2
    br label %ctd_ife

  elsee:
    %xx2 = add i64 %x1, %a1b2
    %pa2 = getelementptr i64, i64* %a1aa2, i64 %xx2
    store i64 %a1a, i64* %pa2
    br label %ctd_ife

  ctd_ife:
    %x18 = phi i64* [ %a1aa2, %elsee ], [ %a2ca2, %thene ]
    br label %ctd_ifd

  elsed:
    %xo1 = add i64 %x1, %a1b2
    %p2 = getelementptr i64, i64* %a1aa2, i64 %xo1
    store i64 %a1a, i64* %p2
    br label %ctd_ifd

  ctd_ifd:
    %xo2 = phi i64* [ %a1aa2, %elsed ], [ %x18, %ctd_ife ]
    %xp = insertvalue { i64*, i64 } zeroinitializer, i64* %xo2, 0
    %x19 = insertvalue { i64*, i64 } %xp, i64 %xda, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xca, 0
    %a21 = extractvalue { i64*, i64 } %xca, 1
    %xe = insertvalue { i64*, i64 } zeroinitializer, i64* %a12, 0
    %xf1 = insertvalue { i64*, i64 } %xe, i64 %x2, 1
    br label %while_startb

  while_startb:
    %xea1 = phi { i64*, i64 } [ %x34, %ctd_ifi ], [ %xf1, %while_end ]
    %a1a1 = extractvalue { i64*, i64 } %xea1, 0
    %a2a1 = extractvalue { i64*, i64 } %xea1, 1
    %xfa = add i64 %x1, 1
    %x20 = icmp slt i64 %xfa, %a2a1
    br i1 %x20, label %while_bodyb, label %while_endb

  while_bodyb:
    %a1a2 = extractvalue { i64*, i64 } %xea1, 0
    %a2a2 = extractvalue { i64*, i64 } %xea1, 1
    %xfa1 = sub i64 %a2a2, 1
    %xga = getelementptr i64, i64* %a1a2, i64 %x1
    %r1 = load i64, i64* %xga
    %xh1 = insertvalue { i64, i64* } zeroinitializer, i64 %r1, 0
    %xi1 = insertvalue { i64, i64* } %xh1, i64* %a1a2, 1
    %a1aa3 = extractvalue { i64, i64* } %xi1, 0
    %a2aa1 = extractvalue { i64, i64* } %xi1, 1
    %xj1 = getelementptr i64, i64* %a2aa1, i64 %xfa1
    %ra2 = load i64, i64* %xj1
    %xk1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra2, 0
    %xl1 = insertvalue { i64, i64* } %xk1, i64* %a2aa1, 1
    %a1b3 = extractvalue { i64, i64* } %xl1, 0
    %a2b3 = extractvalue { i64, i64* } %xl1, 1
    %p3 = getelementptr i64, i64* %a2b3, i64 %x1
    store i64 %a1b3, i64* %p3
    %pa3 = getelementptr i64, i64* %a2b3, i64 %xfa1
    store i64 %a1aa3, i64* %pa3
    %xo3 = sub i64 %x1, %x1
    %xp1 = add i64 %x1, %xo3
    %xq2 = getelementptr i64, i64* %a2b3, i64 %xp1
    %rb2 = load i64, i64* %xq2
    %xr2 = insertvalue { i64, i64* } zeroinitializer, i64 %rb2, 0
    %xs2 = insertvalue { i64, i64* } %xr2, i64* %a2b3, 1
    %a1c2 = extractvalue { i64, i64* } %xs2, 0
    %a2c2 = extractvalue { i64, i64* } %xs2, 1
    %xt2 = insertvalue { i64, i1 } zeroinitializer, i64 %xo3, 0
    %tmpe = insertvalue { i64, i1 } %xt2, i1 1, 1
    %xu2 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2c2, 0
    %xv1 = insertvalue { i64*, { i64, i1 } } %xu2, { i64, i1 } %tmpe, 1
    br label %while_startc

  while_startc:
    %xta = phi { i64*, { i64, i1 } } [ %x32, %ctd_iff ], [ %xv1, %while_bodyb ]
    %a1ab1 = extractvalue { i64*, { i64, i1 } } %xta, 0
    %xua = extractvalue { i64*, { i64, i1 } } %xta, 1
    %a1ba = extractvalue { i64, i1 } %xua, 0
    %a2ba = extractvalue { i64, i1 } %xua, 1
    %xva = sub i64 %xfa1, %x1
    %xwa = sub i64 %xva, 1
    %xxa = udiv i64 %xwa, 2
    %xy1 = icmp slt i64 %a1ba, %xxa
    %x21 = and i1 %xy1, %a2ba
    br i1 %x21, label %while_bodyc, label %while_endc

  while_bodyc:
    %a1ab2 = extractvalue { i64*, { i64, i1 } } %xta, 0
    %xua1 = extractvalue { i64*, { i64, i1 } } %xta, 1
    %a1ba1 = extractvalue { i64, i1 } %xua1, 0
    %a2ba1 = extractvalue { i64, i1 } %xua1, 1
    %xva1 = mul i64 %a1ba1, 2
    %xwa1 = add i64 %xva1, 1
    %xxa1 = mul i64 %a1ba1, 2
    %xya = add i64 %xxa1, 2
    %xza = add i64 %x1, %xwa1
    %ya1 = add i64 %x1, %xya
    %yb3 = getelementptr i64, i64* %a1ab2, i64 %xza
    %rc2 = load i64, i64* %yb3
    %yc2 = insertvalue { i64, i64* } zeroinitializer, i64 %rc2, 0
    %yd3 = insertvalue { i64, i64* } %yc2, i64* %a1ab2, 1
    %a1d2 = extractvalue { i64, i64* } %yd3, 0
    %a2d2 = extractvalue { i64, i64* } %yd3, 1
    %ye2 = getelementptr i64, i64* %a2d2, i64 %ya1
    %rd2 = load i64, i64* %ye2
    %yf = insertvalue { i64, i64* } zeroinitializer, i64 %rd2, 0
    %yg = insertvalue { i64, i64* } %yf, i64* %a2d2, 1
    %a1ac = extractvalue { i64, i64* } %yg, 0
    %a2ab = extractvalue { i64, i64* } %yg, 1
    %yh4 = icmp ult i64 %a1d2, %a1ac
    %pb3 = getelementptr i64, i64* %a2ab, i64 %xza
    store i64 %a1d2, i64* %pb3
    %pc2 = getelementptr i64, i64* %a2ab, i64 %ya1
    store i64 %a1ac, i64* %pc2
    br i1 %yh4, label %thenf, label %elsef

  thenf:
    %yl2 = getelementptr i64, i64* %a1ab2, i64 %ya1
    %re = load i64, i64* %yl2
    %ym = insertvalue { i64, i64* } zeroinitializer, i64 %re, 0
    %yn2 = insertvalue { i64, i64* } %ym, i64* %a1ab2, 1
    %a1e = extractvalue { i64, i64* } %yn2, 0
    %a2e = extractvalue { i64, i64* } %yn2, 1
    %yo2 = icmp ult i64 %a1c2, %a1e
    %pd = getelementptr i64, i64* %a2e, i64 %ya1
    store i64 %a1e, i64* %pd
    br i1 %yo2, label %theng, label %elseg

  theng:
    %yr = add i64 %x1, %xya
    %ys = getelementptr i64, i64* %a1ab2, i64 %yr
    %rf = load i64, i64* %ys
    %yt = insertvalue { i64, i64* } zeroinitializer, i64 %rf, 0
    %yu = insertvalue { i64, i64* } %yt, i64* %a1ab2, 1
    %a1ca3 = extractvalue { i64, i64* } %yu, 0
    %a2ca3 = extractvalue { i64, i64* } %yu, 1
    %yv = add i64 %x1, %a1ba1
    %pe = getelementptr i64, i64* %a2ca3, i64 %yv
    store i64 %a1ca3, i64* %pe
    %yx = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca3, 0
    %yy = insertvalue { i64, i1 } zeroinitializer, i64 %xya, 0
    %x22 = insertvalue { i64, i1 } %yy, i1 1, 1
    %x23 = insertvalue { i64*, { i64, i1 } } %yx, { i64, i1 } %x22, 1
    br label %ctd_ifg

  elseg:
    %yr1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1ab2, 0
    %ys1 = insertvalue { i64, i1 } zeroinitializer, i64 %a1ba1, 0
    %x24 = insertvalue { i64, i1 } %ys1, i1 0, 1
    %x25 = insertvalue { i64*, { i64, i1 } } %yr1, { i64, i1 } %x24, 1
    br label %ctd_ifg

  ctd_ifg:
    %x26 = phi { i64*, { i64, i1 } } [ %x25, %elseg ], [ %x23, %theng ]
    br label %ctd_iff

  elsef:
    %yl3 = getelementptr i64, i64* %a1ab2, i64 %xza
    %re1 = load i64, i64* %yl3
    %ym1 = insertvalue { i64, i64* } zeroinitializer, i64 %re1, 0
    %yn3 = insertvalue { i64, i64* } %ym1, i64* %a1ab2, 1
    %a1e1 = extractvalue { i64, i64* } %yn3, 0
    %a2e1 = extractvalue { i64, i64* } %yn3, 1
    %yo3 = icmp ult i64 %a1c2, %a1e1
    %pd1 = getelementptr i64, i64* %a2e1, i64 %xza
    store i64 %a1e1, i64* %pd1
    br i1 %yo3, label %thenh, label %elseh

  thenh:
    %yr2 = add i64 %x1, %xwa1
    %ys2 = getelementptr i64, i64* %a1ab2, i64 %yr2
    %rf1 = load i64, i64* %ys2
    %yt1 = insertvalue { i64, i64* } zeroinitializer, i64 %rf1, 0
    %yu1 = insertvalue { i64, i64* } %yt1, i64* %a1ab2, 1
    %a1ca4 = extractvalue { i64, i64* } %yu1, 0
    %a2ca4 = extractvalue { i64, i64* } %yu1, 1
    %yv1 = add i64 %x1, %a1ba1
    %pe1 = getelementptr i64, i64* %a2ca4, i64 %yv1
    store i64 %a1ca4, i64* %pe1
    %yx1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca4, 0
    %yy1 = insertvalue { i64, i1 } zeroinitializer, i64 %xwa1, 0
    %x27 = insertvalue { i64, i1 } %yy1, i1 1, 1
    %x28 = insertvalue { i64*, { i64, i1 } } %yx1, { i64, i1 } %x27, 1
    br label %ctd_ifh

  elseh:
    %yr3 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1ab2, 0
    %ys3 = insertvalue { i64, i1 } zeroinitializer, i64 %a1ba1, 0
    %x29 = insertvalue { i64, i1 } %ys3, i1 0, 1
    %x30 = insertvalue { i64*, { i64, i1 } } %yr3, { i64, i1 } %x29, 1
    br label %ctd_ifh

  ctd_ifh:
    %x31 = phi { i64*, { i64, i1 } } [ %x30, %elseh ], [ %x28, %thenh ]
    br label %ctd_iff

  ctd_iff:
    %x32 = phi { i64*, { i64, i1 } } [ %x31, %ctd_ifh ], [ %x26, %ctd_ifg ]
    br label %while_startc

  while_endc:
    %a1ab3 = extractvalue { i64*, { i64, i1 } } %xta, 0
    %xua2 = extractvalue { i64*, { i64, i1 } } %xta, 1
    %a1ba2 = extractvalue { i64, i1 } %xua2, 0
    %a2ba2 = extractvalue { i64, i1 } %xua2, 1
    %xva2 = sub i64 %xfa1, %x1
    %xwa2 = udiv i64 %xva2, 2
    %xx3 = icmp slt i64 %a1ba2, %xwa2
    br i1 %xx3, label %theni, label %elsei

  theni:
    %xya1 = mul i64 %a1ba2, 2
    %xza1 = add i64 %xya1, 1
    %ya2 = add i64 %x1, %xza1
    %yb4 = getelementptr i64, i64* %a1ab3, i64 %ya2
    %rc3 = load i64, i64* %yb4
    %yc3 = insertvalue { i64, i64* } zeroinitializer, i64 %rc3, 0
    %yd4 = insertvalue { i64, i64* } %yc3, i64* %a1ab3, 1
    %a1d3 = extractvalue { i64, i64* } %yd4, 0
    %a2d3 = extractvalue { i64, i64* } %yd4, 1
    %ye3 = icmp ult i64 %a1c2, %a1d3
    %pb4 = getelementptr i64, i64* %a2d3, i64 %ya2
    store i64 %a1d3, i64* %pb4
    br i1 %ye3, label %thenj, label %elsej

  thenj:
    %yh5 = add i64 %x1, %xza1
    %yi4 = getelementptr i64, i64* %a1ab3, i64 %yh5
    %rd3 = load i64, i64* %yi4
    %yj2 = insertvalue { i64, i64* } zeroinitializer, i64 %rd3, 0
    %yk2 = insertvalue { i64, i64* } %yj2, i64* %a1ab3, 1
    %a1ca5 = extractvalue { i64, i64* } %yk2, 0
    %a2ca5 = extractvalue { i64, i64* } %yk2, 1
    %yl4 = add i64 %x1, %a1ba2
    %pc3 = getelementptr i64, i64* %a2ca5, i64 %yl4
    store i64 %a1ca5, i64* %pc3
    %yn4 = add i64 %x1, %xza1
    %pd2 = getelementptr i64, i64* %a2ca5, i64 %yn4
    store i64 %a1c2, i64* %pd2
    br label %ctd_ifj

  elsej:
    %yh6 = add i64 %x1, %a1ba2
    %pc4 = getelementptr i64, i64* %a1ab3, i64 %yh6
    store i64 %a1c2, i64* %pc4
    br label %ctd_ifj

  ctd_ifj:
    %x33 = phi i64* [ %a1ab3, %elsej ], [ %a2ca5, %thenj ]
    br label %ctd_ifi

  elsei:
    %xy2 = add i64 %x1, %a1ba2
    %pb5 = getelementptr i64, i64* %a1ab3, i64 %xy2
    store i64 %a1c2, i64* %pb5
    br label %ctd_ifi

  ctd_ifi:
    %xy3 = phi i64* [ %a1ab3, %elsei ], [ %x33, %ctd_ifj ]
    %xz1 = insertvalue { i64*, i64 } zeroinitializer, i64* %xy3, 0
    %x34 = insertvalue { i64*, i64 } %xz1, i64 %xfa1, 1
    br label %while_startb

  while_endb:
    %a1a3 = extractvalue { i64*, i64 } %xea1, 0
    %a2a3 = extractvalue { i64*, i64 } %xea1, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x35 = phi i64* [ %x, %else ], [ %a1a3, %while_endb ]
    ret i64* %x35
}
